basic="payever debuggen"
exception="Exception"
paymentParameters="payment parameters"
submitPaymentParameters="submit payment parameters"
submitPaymentResponse="submit payment response"
createPaymentRequest="create payment request"
createPaymentResponse="create payment response"
processCreatePaymentRequest="process create payment request"
executePaymentRetrieve="execute payment retrieving"
executePaymentResponse="execute payment response"
getPaymentDetails="payment details"
authenticationRequest="authentication request"
retrievingPaymentForNotifications="retrieve payment for notifications"
updatingPlentyPaymentForNotifications="updating plenty payment for notifications"
successfulCreatingPlentyPayment="Successful creating plenty payment"
successfulUpdatingPlentyPayment="Successful updating plenty payment"
refundData="refund data"
refundResponse="refund response"
successUrlWasCalled="success url was called"
pendingUrlWasCalled="pending url was called"
cancelUrlWasCalled="cancel url was called"
failureUrlWasCalled="failure url was called"
successfulCreatingPlentyOrder="Successful Creating Plenty Order"
newPaymentForOrderIsLoaded="New payment for order is loaded"
pendingPaymentForOrderIsLoaded="Pending payment for order is loaded"
pendingPaymentForOrderIsRemoved="Pending payment for order is removed"
assignOrderTotalsIfNotExists="Assign order totals if not exists"
updateOrderTotalsForShippedStatus="Update order totals for shipped status"
statusOfOrderWasChanged="Status of order was changed"
statusOfPaymentWasChanged="Status of payment was changed"
transactionWasAssignedToTheOrder="Transaction was assigned to the order"
placingOrderError="placing order error"
ConfirmationUrlCalling="confirmation url calling"
placeOrderCalling="place order calling"
noticeUrlWasCalled="notice_url was called"
processingPayeverStatus="processing payever status"
tokensAtCheckoutFinishNotMatched="Token is invalid"
tokensAtCheckoutFinishMatched="Tokens are matched"
ExecutePayment="Listened for the event that executes the payment"
payeverExecutePayment="Execute the payment"
createPlentyPayment="Create a plentymarkets payment from the payever execution params"
assignPlentyPaymentToPlentyOrder="assigning plentyPayment to PlentyOrder"
updateOrderStatus="Updating order status"
lockAndBlock="locked"
unlock="unlocked"
waitForUnlock="wait for unlock"
shippingData="Shipping data"
transactionData="Transaction data"
shippingRequest="Shipping goods trigger request"
shippingResponse="Shipping goods trigger response"
cancelData="Cancel data"
transactionData="Transaction data"
cancelResponse="Cancel trigger response"
listPaymentOptionsRequest="List payment options"
executeCommand="Executing plugin command"
autoOrderCanceling="Auto order canceling"
cancelingOrdersDateTo="Order canceling date to"
notificationRequestProcessorException="NotificationRequestProcessor exception"
notificationRequestProcessorReturnData="NotificationRequestProcessor return data"
notificationRequestProcessorSignatureMatches="NotificationRequestProcessor signature matches"
checkoutDebug="Checkout debug"
notificationDebug="Notification debug"
StartOrderPdfGenerationEvent="Start adding payment details on invoice"
OrderPdfGenerationEventPayment="OrderPdfGenerationEvent payment"
boot="boot"
shippingPaymentRequest="Shipping payment request"
actionsHandler="Call actions handler"
paymentActionCancel="Payment action cancel"
paymentActionRefund="Payment action refund"
paymentActionShipping="Payment action shipping"
processOrderPaymentAfterResponse="Process order payment after check response"
orderTotal="Order total"
startNotificationActionHandler="Start handle notification action"
notificationPaymentActionRejected="[Notification] Payment action was rejected because it was registered before"
notificationItemIsNotFound="[Notification] Item is not found"
notificationHandleRefundItemsAction="[Notification] Handle refund items action"
notificationHandleRefundAmountAction="[Notification] Handle refund amount action"
notificationHandleCancelAmountAction="[Notification] Handle cancel amount action"
notificationHandleShippingItemsAction="[Notification] Handle shipping items action"
notificationHandleShippingAmountAction="[Notification] Handle shipping amount action"
shippingEventProcedure="Shipping Event Procedure"
returnEventProcedure="Return Event Procedure"
refundEventProcedure="Refund Event Procedure"
cancelEventProcedure="Cancel Event Procedure"
